(()=>{"use strict";var e={948:(e,o,t)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.connect=async function(){return(0,s.createPool)({host:"localhost",user:"root",password:"",database:"funeraria_db",connectionLimit:10,timezone:"local"})};const s=t(498)},486:function(e,o,t){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0}),o.App=void 0;const n=s(t(577)),a=s(t(252)),r=s(t(96)),i=s(t(3)),l=s(t(271)),c=s(t(612)),u="../../cliente/DirectoriCliente/";o.App=class{constructor(e){this.port=e,this.app=(0,a.default)(),this.settings(),this.middlewares(),this.routes()}settings(){this.app.set("port",this.port||process.env.PORT||3080),this.app.set("path",u)}allowCrossDomain(e,o,t){o.header("Access-Control-Allow-Origin","*"),o.header("Access-Control-Allow-Methods","GET,PUT,POST,DELETE"),o.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, Cache-Control, Authorization, Content-Length"),"OPTIONS"==e.method?o.send(200):t()}middlewares(){this.app.use((0,r.default)("dev")),this.app.use((0,n.default)()),this.app.use(this.allowCrossDomain),this.app.use(a.default.json({limit:"1mb"})),this.app.use(a.default.urlencoded({extended:!0})),this.app.use(a.default.static(u))}routes(){this.app.use("/api/usuarios",l.default),this.app.use("/api/ingresos",c.default),this.app.get("*",(function(e,o){o.sendfile(i.default.join(u,"index.html"))}))}async listen(){this.app.listen(this.app.get("port")),console.log("server on port:",this.app.get("port"))}}},296:(e,o,t)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.ObtenerEstatus=o.ObtenerCombinaciones=o.ObtenerUsuarios=o.ObtenerSubcategorias=o.ObtenerCategorias=o.ObtenerSegmentos=o.ObtenerConceptos=o.UpdateIngresos=o.PostIngresos=o.ObtenerIngresos=void 0;const s=t(948);o.ObtenerIngresos=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM vistaingresos";n=(await t.query(e))[0]}catch(e){console.log("Error en Ingresos"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.PostIngresos=async(e,o)=>{let t,n;const{Fecha:a,SegmentoID:r,CategoriaID:i,SubcategoriaID:l,ConceptoID:c,Descripcion:u,Proveedor:g,Piezas:d,CajaChica:p,Monto:y,Saldo:b,Comprobante:C,EstatusComprobacionID:h,FechaAutorizacion:E,UsuarioAutorizaID:m,UsuarioRecibeID:I,FechaConciliacion:O,ObservacionesDifConciliacion:w}=e.body;console.log("estos datos recibo en PostIngresos",e.body);try{t=await(0,s.connect)();const e="\n            INSERT INTO ingresos (\n                Fecha, SegmentoID, CategoriaID, SubcategoriaID, ConceptoID, Descripcion,\n                Proveedor, Piezas, CajaChica, Monto, Saldo, Comprobante, EstatusComprobacionID,\n                FechaAutorizacion, UsuarioAutorizaID, UsuarioRecibeID, FechaConciliacion, ObservacionesDifConciliacion\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        ",o=[a,r,i,l,c,u,g,d,p,y,b,C,h,E,m,I,O,w];console.log("Ejecutando query:",e),console.log("Con valores:",o),await t.query(e,o),console.log("Query ejecutado exitosamente."),n={message:"Ingreso creado exitosamente"}}catch(e){console.log("Error en Ingresos"),console.log(e),n={message:"Error al crear el ingreso"}}finally{return await(null==t?void 0:t.end()),console.log("ConexiÃ³n a la base de datos cerrada."),o.json(n)}},o.UpdateIngresos=async(e,o)=>{let t,n;const{IngresoID:a,Fecha:r,SegmentoID:i,CategoriaID:l,SubcategoriaID:c,ConceptoID:u,Descripcion:g,Proveedor:d,Piezas:p,CajaChica:y,Monto:b,Saldo:C,Comprobante:h,EstatusComprobacionID:E,FechaAutorizacion:m,UsuarioAutorizaID:I,UsuarioRecibeID:O,FechaConciliacion:w,ObservacionesDifConciliacion:f}=e.body;try{t=await(0,s.connect)();const e="\n            UPDATE ingresos SET\n                Fecha = ?, SegmentoID = ?, CategoriaID = ?, SubcategoriaID = ?, ConceptoID = ?, Descripcion = ?,\n                Proveedor = ?, Piezas = ?, CajaChica = ?, Monto = ?, Saldo = ?, Comprobante = ?, EstatusComprobacionID = ?,\n                FechaAutorizacion = ?, UsuarioAutorizaID = ?, UsuarioRecibeID = ?, FechaConciliacion = ?, ObservacionesDifConciliacion = ?\n            WHERE IngresoID = ?\n        ",o=[r,i,l,c,u,g,d,p,y,b,C,h,E,m,I,O,w,f,a];await t.query(e,o),n={message:"Ingreso actualizado exitosamente"}}catch(e){console.log("Error en Ingresos"),console.log(e),n={message:"Error al actualizar el ingreso"}}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerConceptos=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM Conceptos";n=(await t.query(e))[0]}catch(e){console.log("Error en Conceptos"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerSegmentos=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM Segmentos";n=(await t.query(e))[0]}catch(e){console.log("Error en Segmentos"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerCategorias=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM Categorias";n=(await t.query(e))[0]}catch(e){console.log("Error en Categorias"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerSubcategorias=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM Subcategorias";n=(await t.query(e))[0]}catch(e){console.log("Error en Subcategorias"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerUsuarios=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM Usuarios";n=(await t.query(e))[0]}catch(e){console.log("Error en Usuarios"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerCombinaciones=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM Combinaciones";n=(await t.query(e))[0]}catch(e){console.log("Error en Combinaciones"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.ObtenerEstatus=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM EstatusComprobacion";n=(await t.query(e))[0]}catch(e){console.log("Error en Estatus"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}}},918:(e,o,t)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.UpdateUser=o.PostUsers=o.ObtenerUsuarios=o.Login=void 0;const s=t(948);o.Login=async(e,o)=>{const{email:t,password:n}=e.body;let a,r;try{a=await(0,s.connect)();const e="SELECT * FROM usuarios WHERE email = ?",o=(await a.query(e,[t]))[0];if(o.length>0){const e=o[0];r=e.password===n?e:null}else r=null}catch(e){console.log("Error en Login"),console.log(e),r=null}finally{return await(null==a?void 0:a.end()),r?o.json({success:!0,user:r}):o.status(401).json({success:!1,message:"Credenciales incorrectas"})}},o.ObtenerUsuarios=async(e,o)=>{let t,n;try{t=await(0,s.connect)();let e="SELECT * FROM usuarios";n=(await t.query(e))[0]}catch(e){console.log("Error en Usuarios"),console.log(e),n=null}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.PostUsers=async(e,o)=>{let t,n;const{fullName:a,phone:r,email:i,isAdmin:l}=e.body;try{t=await(0,s.connect)();let e="SELECT COUNT(*) AS count FROM usuarios WHERE email = ?";const[o]=await t.query(e,[i]);if(o.length>0&&o[0].count>0)n={message:"Email already exists. User not created."};else{e="INSERT INTO usuarios (fullName, phone, email, isAdmin, password) VALUES (?, ?, ?, ?, ?)";const o=[a,r,i,l,123456];await t.query(e,o),n={message:"User created successfully"}}}catch(e){console.log("Error en Usuarios"),console.log(e),n={message:"Error creating user"}}finally{return await(null==t?void 0:t.end()),o.json(n)}},o.UpdateUser=async(e,o)=>{let t,n;const{userId:a,fullName:r,phone:i,email:l,isAdmin:c}=e.body;try{t=await(0,s.connect)();let e="UPDATE usuarios SET fullName = ?, phone = ?, email = ?, isAdmin = ? WHERE userId = ?";const o=[r,i,l,c,a];await t.query(e,o),n={message:"User updated successfully"}}catch(e){console.log("Error en Usuarios"),console.log(e),n={message:"Error updating user"}}finally{return await(null==t?void 0:t.end()),o.json(n)}}},612:(e,o,t)=>{Object.defineProperty(o,"__esModule",{value:!0});const s=t(252),n=t(296),a=(0,s.Router)();a.get("/GetIngresos",n.ObtenerIngresos),a.post("/PostIngresos",n.PostIngresos),a.put("/UpdateIngresos",n.UpdateIngresos),a.get("/GetConceptos",n.ObtenerConceptos),a.get("/GetSegmentos",n.ObtenerSegmentos),a.get("/GetCategorias",n.ObtenerCategorias),a.get("/GetSubcategorias",n.ObtenerSubcategorias),a.get("/GetUsuarios",n.ObtenerUsuarios),a.get("/GetCombinaciones",n.ObtenerCombinaciones),a.get("/GetEstatus",n.ObtenerEstatus),o.default=a},271:(e,o,t)=>{Object.defineProperty(o,"__esModule",{value:!0});const s=t(252),n=t(918),a=(0,s.Router)();a.get("/GetUsuarios",n.ObtenerUsuarios),a.post("/PostUsers",n.PostUsers),a.put("/UpdateUser",n.UpdateUser),a.post("/login",n.Login),o.default=a},577:e=>{e.exports=require("cors")},252:e=>{e.exports=require("express")},96:e=>{e.exports=require("morgan")},498:e=>{e.exports=require("mysql2/promise")},3:e=>{e.exports=require("path")}},o={};function t(s){var n=o[s];if(void 0!==n)return n.exports;var a=o[s]={exports:{}};return e[s].call(a.exports,a,a.exports,t),a.exports}(()=>{const e=t(486);!async function(){const o=new e.App(3080);await o.listen()}()})()})();